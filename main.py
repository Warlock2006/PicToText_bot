import asyncio
import types

from aiogram import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils import executor

from dotenv import load_dotenv

from db_using import *
from msg_funcs import *

load_dotenv()

API_TOKEN = os.environ['TOKEN']
storage = MemoryStorage()
bot = Bot(API_TOKEN)
dp = Dispatcher(bot, storage=storage)
pytesseract.pytesseract.tesseract_cmd = r'C:\Users\Fedor\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'
started = False


class MySG(StatesGroup):
    start = State()
    send_photo = State()
    send_video = State()
    send_lang_and_get_ocr_result = State()


@dp.message_handler(lambda x: not started, commands="start")
async def start(message: types.Message, state: FSMContext):
    global started
    started = True
    user = message.from_user
    buttons = [
        InlineKeyboardButton(text="üñº–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É!", callback_data='send_photo'),
        InlineKeyboardButton(text="üé¨–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç!", callback_data='send_video')
    ]
    keyboard = InlineKeyboardMarkup().add(*buttons)
    await bot.send_message(message.chat.id,
                           f'üëã–ü—Ä–∏–≤–µ—Ç, @{user.username}! –Ø PicToText - –±–æ—Ç. '
                           f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º ,–∞ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ '
                           f'—Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —è —Å–º–æ–≥—É —Ç–∞–º —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å.',
                           reply_markup=keyboard)
    await state.set_state(MySG.start.state)


@dp.callback_query_handler(state=MySG.start.state, text='send_photo')
async def send_photo_handler(callback: CallbackQuery, state: FSMContext):
    await bot.edit_message_text('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!', chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id)
    buttons = [
        InlineKeyboardButton(text='‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back')
    ]
    keyboard = InlineKeyboardMarkup().add(*buttons)
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id,
                                        reply_markup=keyboard)
    await state.set_state(MySG.send_photo.state)


@dp.callback_query_handler(state=MySG.all_states, text='back')
async def back_button_handler(callback: CallbackQuery, state: FSMContext):
    global started
    started = False
    buttons = [
        InlineKeyboardButton(text="üñº–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É!", callback_data='send_photo'),
        InlineKeyboardButton(text="üé¨–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç!", callback_data='send_video')
    ]
    keyboard = InlineKeyboardMarkup().add(*buttons)
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id)
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=keyboard)
    await state.set_state(MySG.start.state)


@dp.callback_query_handler(state=MySG.start.state, text='send_video')
async def send_video_handler(callback: CallbackQuery, state: FSMContext):
    await bot.edit_message_text('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º!', chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id)
    buttons = [
        InlineKeyboardButton(text='‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back')
    ]
    keyboard = InlineKeyboardMarkup().add(*buttons)
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id,
                                        reply_markup=keyboard)
    await state.set_state(MySG.send_video.state)


@dp.message_handler(state=MySG.send_photo.state, content_types=['photo', 'document'])
async def save_picture(message: types.Message, state: FSMContext):
    try:
        if message.content_type == 'photo':
            file_path = await download_photo(message, bot)
            await state.update_data(path='files/' + file_path)
        elif message.content_type == 'document':
            file_path = await download_doc(message, bot)
            await state.update_data(path='files/' + file_path)
        await state.update_data(type='photo')
        await bot.send_message(message.chat.id, '–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
        await bot.send_message(message.chat.id,
                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: eng, rus, fra –∏ —Ç.–¥.\n'
                               '–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤, —Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ rus+eng, deu+fra –∏ —Ç.–¥.')
        await state.set_state(MySG.send_lang_and_get_ocr_result.state)
    except Exception:
        await bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞!')


@dp.message_handler(state=MySG.send_video.state, content_types=['document', 'video'])
async def save_video(message: types.Message, state: FSMContext):
    try:
        if message.content_type == 'video':
            file_path = await download_video(message, bot)
            await state.update_data(path='files/' + file_path)
        elif message.content_type == 'document':
            file_path = await download_doc(message, bot)
            await state.update_data(path='files/' + file_path)
        await state.update_data(type='video')
        await bot.send_message(message.chat.id, '–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        await bot.send_message(message.chat.id,
                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: eng, rus, fra –∏ —Ç.–¥.\n'
                               '–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤, —Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ rus+eng, deu+fra –∏ —Ç.–¥.')
        await state.set_state(MySG.send_lang_and_get_ocr_result.state)
    except Exception:
        await bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞!')


@dp.message_handler(state=MySG.send_lang_and_get_ocr_result.state, content_types=['text'])
async def get_lang(message: types.Message, state: FSMContext):
    global started
    try:
        lang = message.text
        data = await state.get_data()
        type_of_ocr = data.get('type')
        path = data.get('path')
        lang_checker = all(True for language in lang.split('+') if language in pytesseract.get_languages())
        if lang_checker:
            if type_of_ocr == 'photo':
                await insert_photo_into_db(path, lang, message.from_user)
                img_text = await ocr(path, lang)
                await bot.send_message(message.chat.id, img_text)
                await state.finish()
                started = False
            elif type_of_ocr == 'video':
                await insert_video_into_db(path, lang, message.from_user)
                await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
                video_text = await video_ocr(path, lang)
                for frame_text in video_text:
                    await bot.send_message(message.chat.id, frame_text)
                await state.finish()
                started = False
        else:
            await bot.send_message(message.chat.id,
                                   '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!')
    except Exception as e:

        await bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞: {e}')
        started = False
        await state.finish()


if __name__ == '__main__':
    asyncio.run(executor.start_polling(dp, skip_updates=True))
