from aiogram import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile
from aiogram.utils import executor

from dotenv import load_dotenv

from db_using import *
from msg_funcs import *

load_dotenv()

API_TOKEN = os.environ['TOKEN']
storage = MemoryStorage()
bot = Bot(API_TOKEN)
dp = Dispatcher(bot, storage=storage)
pytesseract.pytesseract.tesseract_cmd = r'C:\Users\Fedor\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'


class OcrDialog(StatesGroup):
    start = State()
    send_photo = State()
    send_video = State()
    send_lang = State()
    send_lang_to_translate_and_ocr = State()


class HistoryDialog(StatesGroup):
    start = OcrDialog.start
    choose_type_of_history = State()
    show_photo_history = State()
    select_photo = State()
    show_video_history = State()
    select_video = State()


class BackButtonUsageStates(StatesGroup):
    start = HistoryDialog.start
    send_photo = OcrDialog.send_photo
    send_video = OcrDialog.send_video
    choose_type_of_history = HistoryDialog.choose_type_of_history
    show_photo_history = HistoryDialog.show_photo_history
    show_video_history = HistoryDialog.show_video_history


@dp.message_handler(commands="start")
async def start(message: types.Message, state: FSMContext):
    user = message.from_user
    await state.update_data(user_=user)
    buttons = [
        InlineKeyboardButton(text="üñº–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É!", callback_data='send_photo'),
        InlineKeyboardButton(text="üé¨–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ!", callback_data='send_video'),
        InlineKeyboardButton(text='üìú–ò—Å—Ç–æ—Ä–∏—è', callback_data='show_history')
    ]
    keyboard = InlineKeyboardMarkup(row_width=2).add(*buttons)
    await bot.send_message(message.chat.id,
                           f'üëã–ü—Ä–∏–≤–µ—Ç, [{user.first_name}](tg://user?id={user.id})! –Ø PicToText - –±–æ—Ç. '
                           f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º ,–∞ —è –æ—Ç–≤–µ—á—É —Ç–µ–±–µ '
                           f'—Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —è —Å–º–æ–≥—É —Ç–∞–º —Ä–∞–∑–≥–ª—è–¥–µ—Ç—å.',
                           reply_markup=keyboard, parse_mode='Markdown')
    await state.set_state(OcrDialog.start.state)


@dp.callback_query_handler(state=OcrDialog.start.state, text='send_photo')
async def send_photo_handler(callback: CallbackQuery, state: FSMContext):
    await bot.edit_message_text('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!', chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id)
    buttons = [
        InlineKeyboardButton(text='‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back')
    ]
    keyboard = InlineKeyboardMarkup().add(*buttons)
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id,
                                        reply_markup=keyboard)
    await state.set_state(OcrDialog.send_photo.state)


@dp.callback_query_handler(state=OcrDialog.start.state, text='send_video')
async def send_video_handler(callback: CallbackQuery, state: FSMContext):
    await bot.edit_message_text('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º!', chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id)
    buttons = [
        InlineKeyboardButton(text='‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back')
    ]
    keyboard = InlineKeyboardMarkup().add(*buttons)
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id,
                                        reply_markup=keyboard)
    await state.set_state(OcrDialog.send_video.state)


@dp.callback_query_handler(state=BackButtonUsageStates.all_states, text='back')
async def back_button_handler(callback: CallbackQuery, state: FSMContext):
    buttons = [
        InlineKeyboardButton(text="üñº–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É!", callback_data='send_photo'),
        InlineKeyboardButton(text="üé¨–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ!", callback_data='send_video'),
        InlineKeyboardButton(text='üìú–ò—Å—Ç–æ—Ä–∏—è', callback_data='show_history')
    ]
    keyboard = InlineKeyboardMarkup(row_width=2).add(*buttons)
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ!', chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id)
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=keyboard)
    await state.set_state(OcrDialog.start.state)


@dp.callback_query_handler(state=HistoryDialog.start.state, text=['show_history'])
async def history_button_handler(callback: CallbackQuery, state: FSMContext):
    buttons = [
        InlineKeyboardButton(text="üñº–§–æ—Ç–æ", callback_data='show_photo_history'),
        InlineKeyboardButton(text="üé¨–í–∏–¥–µ–æ", callback_data='show_video_history'),
        InlineKeyboardButton(text='‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back')
    ]
    keyboard = InlineKeyboardMarkup(row_width=2).add(*buttons)
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏ –∫–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!', chat_id=callback.message.chat.id,
                                message_id=callback.message.message_id)
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=keyboard)
    await state.set_state(HistoryDialog.choose_type_of_history.state)


@dp.callback_query_handler(state=HistoryDialog.choose_type_of_history.state, text=['show_photo_history'])
async def photo_history_button_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = data.get('user_')
    photos_list, texts_list = await get_user_images_and_their_texts(user)
    if photos_list:
        for i, photo in enumerate(photos_list):
            photo = InputFile(photo)
            buttons = [InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç', callback_data=f'{i}')]
            keyboard = InlineKeyboardMarkup().add(*buttons)
            await bot.send_photo(callback.message.chat.id, photo, f'–§–æ—Ç–æ {i + 1}', reply_markup=keyboard)
        await state.update_data(texts_list=texts_list)
        await state.set_state(HistoryDialog.select_photo.state)
    else:
        await bot.send_message(callback.message.chat.id, '–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏!')


@dp.callback_query_handler(state=HistoryDialog.select_photo.state)
async def choose_photo_buttons_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    texts_list = data.get('texts_list')
    await bot.send_message(callback.message.chat.id, texts_list[int(callback.data)])
    await state.finish()


@dp.callback_query_handler(state=HistoryDialog.choose_type_of_history.state, text=['show_video_history'])
async def video_history_button_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = data.get('user_')
    videos_list, texts_list = await get_user_videos_and_their_texts(user)
    if videos_list:
        for i, video in enumerate(videos_list):
            video = InputFile(video)
            buttons = [InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç', callback_data=f'{i}')]
            keyboard = InlineKeyboardMarkup().add(*buttons)
            await bot.send_video(callback.message.chat.id, video, caption=f'–í–∏–¥–µ–æ {i + 1}', reply_markup=keyboard)
        await state.update_data(texts_list=texts_list)
        await state.set_state(HistoryDialog.select_video.state)
    else:
        await bot.send_message(callback.message.chat.id, '–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–Ω–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ!')


@dp.callback_query_handler(state=HistoryDialog.select_video)
async def choose_video_buttons_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    texts_list = data.get('texts_list')
    video_index = int(callback.data)
    for frame_text in texts_list[video_index]:
        await bot.send_message(callback.message.chat.id, frame_text)
    await state.finish()


@dp.message_handler(state=OcrDialog.send_photo.state, content_types=['photo', 'document'])
async def save_picture(message: types.Message, state: FSMContext):
    try:
        if message.content_type == 'photo':
            file_path = await download_photo(message, bot)
            await state.update_data(path='files/' + file_path)
        elif message.content_type == 'document':
            file_path = await download_doc(message, bot)
            await state.update_data(path='files/' + file_path)
        await state.update_data(type='photo')
        await bot.send_message(message.chat.id, '–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
        await bot.send_message(message.chat.id,
                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: eng, rus, fra –∏ —Ç.–¥.\n'
                               '–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤, —Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ rus+eng, deu+fra –∏ —Ç.–¥.')
        await state.set_state(OcrDialog.send_lang.state)
    except Exception as e:
        await bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞: {e}')
        await state.finish()


@dp.message_handler(state=OcrDialog.send_video.state, content_types=['document', 'video'])
async def save_video(message: types.Message, state: FSMContext):
    try:
        if message.content_type == 'video':
            file_path = await download_video(message, bot)
            await state.update_data(path='files/' + file_path)
        elif message.content_type == 'document':
            file_path = await download_doc(message, bot)
            await state.update_data(path='files/' + file_path)
        await state.update_data(type='video')
        await bot.send_message(message.chat.id, '–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
        await bot.send_message(message.chat.id,
                               '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: eng, rus, fra –∏ —Ç.–¥.\n'
                               '–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤, —Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ rus+eng, deu+fra –∏ —Ç.–¥.')
        await state.set_state(OcrDialog.send_lang.state)
    except Exception as e:
        await bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞: {e}')
        await state.finish()


@dp.message_handler(state=OcrDialog.send_lang.state, content_types=['text'])
async def get_lang(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        lang = message.text
        lang_checker = all(True if language in pytesseract.get_languages() else False for language in lang.split('+'))
        _type = data.get('type')
        if _type == 'photo':
            _type = '–∫–∞—Ä—Ç–∏–Ω–∫–∏'
        elif _type == 'video':
            _type = '–≤–∏–¥–µ–æ'
        if lang_checker:
            await state.update_data(lang=lang)
            buttons = [InlineKeyboardButton('‚úÖ–î–∞', callback_data='yes'),
                       InlineKeyboardButton('‚ùå–ù–µ—Ç', callback_data='no')]
            keyboard = InlineKeyboardMarkup().add(*buttons)
            await bot.send_message(message.chat.id, f'–ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å {_type} –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫?',
                                   reply_markup=keyboard)

        else:
            await bot.send_message(message.chat.id,
                                   '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!')
    except Exception as e:

        await bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞: {e}')
        await state.finish()


@dp.callback_query_handler(state=OcrDialog.send_lang.state, text=['no'])
async def no_button_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get('lang')
    path = data.get('path')
    user = data.get('user_')
    type_of_ocr = data.get('type')
    if type_of_ocr == 'photo':
        img_text = await ocr(path, lang)
        img_text: str
        img_text = img_text.replace('|', 'I')
        await insert_photo_into_db(path, lang, img_text, user)
        await bot.send_message(callback.message.chat.id, img_text)
        await state.finish()
        started = False
    elif type_of_ocr == 'video':
        await bot.send_message(callback.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
        video_text = await video_ocr(path, lang, user)
        await insert_video_into_db(path, lang, video_text, user)
        for frame_text in video_text:
            frame_text = frame_text.replace('|', 'I')
            await bot.send_message(callback.message.chat.id, frame_text)
        await state.finish()


@dp.callback_query_handler(state=OcrDialog.send_lang.state, text=['yes'])
async def yes_button_handler(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(callback.message.chat.id,
                           '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ en, ru, fr –∏ —Ç.–¥')
    await state.set_state(OcrDialog.send_lang_to_translate_and_ocr.state)


@dp.message_handler(state=OcrDialog.send_lang_to_translate_and_ocr.state, content_types=['text'])
async def get_lang_to_translate_and_ocr(message: Message, state: FSMContext):
    lang_to_translate = message.text
    data = await state.get_data()
    lang = data.get('lang')
    path = data.get('path')
    type_of_ocr = data.get('type')
    if type_of_ocr == 'photo':
        img_text = await ocr(path, lang)
        img_text = img_text.replace('|', 'I')
        await insert_photo_into_db(path, lang, img_text, message.from_user)
        to_send_text = await translate(img_text, lang_to_translate)
        await bot.send_message(message.chat.id, to_send_text)
        await state.finish()
    elif type_of_ocr == 'video':
        await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
        video_text = await video_ocr(path, lang, message.from_user)
        await insert_video_into_db(path, lang, video_text, message.from_user)
        for frame_text in video_text:
            frame_text = frame_text.replace('|', 'I')
            to_send_text = await translate(frame_text, lang_to_translate)
            await bot.send_message(message.chat.id, to_send_text)
        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
